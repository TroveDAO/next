/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type EntityStruct = {
  name: string;
  entityContract: string;
  entityType: BigNumberish;
  status: boolean;
  geohash: string;
  treasureType: BigNumberish;
  vaultId: BigNumberish;
};

export type EntityStructOutput = [
  string,
  string,
  number,
  boolean,
  string,
  number,
  BigNumber
] & {
  name: string;
  entityContract: string;
  entityType: number;
  status: boolean;
  geohash: string;
  treasureType: number;
  vaultId: BigNumber;
};

export interface TroveRegistryXInterface extends utils.Interface {
  functions: {
    "entities(uint256,uint256)": FunctionFragment;
    "getEntity(uint256,uint256)": FunctionFragment;
    "layers(uint256)": FunctionFragment;
    "removeEntity(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "entities",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "layers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeEntity",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "entities", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getEntity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "layers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeEntity",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TroveRegistryX extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TroveRegistryXInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    entities(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, boolean, string, number, BigNumber] & {
        name: string;
        entityContract: string;
        entityType: number;
        status: boolean;
        geohash: string;
        treasureType: number;
        vaultId: BigNumber;
      }
    >;

    getEntity(
      layerId: BigNumberish,
      entityId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[EntityStructOutput]>;

    layers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, string] & {
        name: string;
        layerId: BigNumber;
        owner: string;
        prover: string;
      }
    >;

    removeEntity(
      layerId: BigNumberish,
      entityId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  entities(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number, boolean, string, number, BigNumber] & {
      name: string;
      entityContract: string;
      entityType: number;
      status: boolean;
      geohash: string;
      treasureType: number;
      vaultId: BigNumber;
    }
  >;

  getEntity(
    layerId: BigNumberish,
    entityId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<EntityStructOutput>;

  layers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, string] & {
      name: string;
      layerId: BigNumber;
      owner: string;
      prover: string;
    }
  >;

  removeEntity(
    layerId: BigNumberish,
    entityId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    entities(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, boolean, string, number, BigNumber] & {
        name: string;
        entityContract: string;
        entityType: number;
        status: boolean;
        geohash: string;
        treasureType: number;
        vaultId: BigNumber;
      }
    >;

    getEntity(
      layerId: BigNumberish,
      entityId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<EntityStructOutput>;

    layers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, string] & {
        name: string;
        layerId: BigNumber;
        owner: string;
        prover: string;
      }
    >;

    removeEntity(
      layerId: BigNumberish,
      entityId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    entities(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntity(
      layerId: BigNumberish,
      entityId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    layers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    removeEntity(
      layerId: BigNumberish,
      entityId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    entities(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntity(
      layerId: BigNumberish,
      entityId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    layers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeEntity(
      layerId: BigNumberish,
      entityId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
