/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MyTokenV, MyTokenVInterface } from "../MyTokenV";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060fb8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063a22cb46514602d575b600080fd5b603c60383660046056565b5050565b005b803560478160aa565b92915050565b803560478160be565b60008060408385031215606a57606a600080fd5b600060748585603e565b9250506020608385828601604d565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82166047565b60b181608d565b811460bb57600080fd5b50565b80151560b156fea264697066735822122042ceff77ff9a2fed65003cdff2678016c465312693375a9d0f877109d33a917564736f6c63430008070033";

type MyTokenVConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MyTokenVConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MyTokenV__factory extends ContractFactory {
  constructor(...args: MyTokenVConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MyTokenV> {
    return super.deploy(overrides || {}) as Promise<MyTokenV>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MyTokenV {
    return super.attach(address) as MyTokenV;
  }
  connect(signer: Signer): MyTokenV__factory {
    return super.connect(signer) as MyTokenV__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MyTokenVInterface {
    return new utils.Interface(_abi) as MyTokenVInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MyTokenV {
    return new Contract(address, _abi, signerOrProvider) as MyTokenV;
  }
}
