/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { EnergyTokenX, EnergyTokenXInterface } from "../EnergyTokenX";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "player",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "ammount",
        type: "uint256",
      },
    ],
    name: "awardEnergy",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610119806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063593fae8f14602d575b600080fd5b603c6038366004606b565b6050565b6040516047919060a2565b60405180910390f35b60015b92915050565b803560538160ca565b803560538160de565b60008060408385031215607f57607f600080fd5b6000608985856059565b92505060206098858286016062565b9150509250929050565b818152602081016053565b600073ffffffffffffffffffffffffffffffffffffffff82166053565b60d18160ad565b811460db57600080fd5b50565b8060d156fea264697066735822122095f2d58352dc4b4816d70062e6d68789451436c1d1124a6cd6907a4411e9631e64736f6c63430008070033";

type EnergyTokenXConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EnergyTokenXConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EnergyTokenX__factory extends ContractFactory {
  constructor(...args: EnergyTokenXConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<EnergyTokenX> {
    return super.deploy(overrides || {}) as Promise<EnergyTokenX>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): EnergyTokenX {
    return super.attach(address) as EnergyTokenX;
  }
  connect(signer: Signer): EnergyTokenX__factory {
    return super.connect(signer) as EnergyTokenX__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EnergyTokenXInterface {
    return new utils.Interface(_abi) as EnergyTokenXInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EnergyTokenX {
    return new Contract(address, _abi, signerOrProvider) as EnergyTokenX;
  }
}
