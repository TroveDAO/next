/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  EnergyExchanger,
  EnergyExchangerInterface,
} from "../EnergyExchanger";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_egyLoveAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_energyTokenAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "ammount",
        type: "uint256",
      },
    ],
    name: "exchange",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getEgyLove",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getEnergyToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newEgyLoveAddress",
        type: "address",
      },
    ],
    name: "setEgyLove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newEnergyTokenAddress",
        type: "address",
      },
    ],
    name: "setEnergyToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516107be3803806107be83398101604081905261002f916100ca565b61003833610069565b600180546001600160a01b039384166001600160a01b0319918216179091556002805492909316911617905561012f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516100c481610118565b92915050565b600080604083850312156100e0576100e0600080fd5b60006100ec85856100b9565b92505060206100fd858286016100b9565b9150509250929050565b60006001600160a01b0382166100c4565b61012181610107565b811461012c57600080fd5b50565b6106808061013e6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063715018a61161005b578063715018a6146100f85780638da5cb5b14610100578063af2453ed14610111578063f2fde38b1461012257600080fd5b806302c750d81461008d57806305496b92146100a25780632437dcda146100c557806353556559146100d8575b600080fd5b6100a061009b36600461048a565b610135565b005b6002546001600160a01b03165b6040516100bc9190610536565b60405180910390f35b6100a06100d336600461048a565b610197565b6100eb6100e63660046104d4565b6101f0565b6040516100bc9190610566565b6100a0610369565b6000546001600160a01b03166100af565b6001546001600160a01b03166100af565b6100a061013036600461048a565b61039f565b6000546001600160a01b031633146101685760405162461bcd60e51b815260040161015f906105d5565b60405180910390fd5b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b031633146101c15760405162461bcd60e51b815260040161015f906105d5565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600180546004805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b0393841690811783556002546003805490931694169390931790556040517fbe180f1200000000000000000000000000000000000000000000000000000000815260009363be180f129261026f9233929101610544565b602060405180830381600087803b15801561028957600080fd5b505af115801561029d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c191906104b3565b506003546040517f593fae8f0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063593fae8f9061030e903390600190600401610544565b602060405180830381600087803b15801561032857600080fd5b505af115801561033c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036091906104f5565b50600192915050565b6000546001600160a01b031633146103935760405162461bcd60e51b815260040161015f906105d5565b61039d60006103fb565b565b6000546001600160a01b031633146103c95760405162461bcd60e51b815260040161015f906105d5565b6001600160a01b0381166103ef5760405162461bcd60e51b815260040161015f90610574565b6103f8816103fb565b50565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b803561046381610628565b92915050565b80516104638161063c565b803561046381610644565b805161046381610644565b60006020828403121561049f5761049f600080fd5b60006104ab8484610458565b949350505050565b6000602082840312156104c8576104c8600080fd5b60006104ab8484610469565b6000602082840312156104e9576104e9600080fd5b60006104ab8484610474565b60006020828403121561050a5761050a600080fd5b60006104ab848461047f565b61051f8161060f565b82525050565b80151561051f565b61051f81610620565b602081016104638284610516565b604081016105528285610516565b61055f602083018461052d565b9392505050565b602081016104638284610525565b6020808252810161046381602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201527f6464726573730000000000000000000000000000000000000000000000000000604082015260600190565b60208082528181019081527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604083015260608201610463565b60006001600160a01b038216610463565b600081610463565b6106318161060f565b81146103f857600080fd5b801515610631565b8061063156fea2646970667358221220908f3f94748fa72a7a550ca6b77e8d082be70dbb048699fd54a141101759b88764736f6c63430008070033";

type EnergyExchangerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EnergyExchangerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EnergyExchanger__factory extends ContractFactory {
  constructor(...args: EnergyExchangerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _egyLoveAddress: string,
    _energyTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<EnergyExchanger> {
    return super.deploy(
      _egyLoveAddress,
      _energyTokenAddress,
      overrides || {}
    ) as Promise<EnergyExchanger>;
  }
  getDeployTransaction(
    _egyLoveAddress: string,
    _energyTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _egyLoveAddress,
      _energyTokenAddress,
      overrides || {}
    );
  }
  attach(address: string): EnergyExchanger {
    return super.attach(address) as EnergyExchanger;
  }
  connect(signer: Signer): EnergyExchanger__factory {
    return super.connect(signer) as EnergyExchanger__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EnergyExchangerInterface {
    return new utils.Interface(_abi) as EnergyExchangerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EnergyExchanger {
    return new Contract(address, _abi, signerOrProvider) as EnergyExchanger;
  }
}
